{"version":3,"sources":["config.js","App/layout/Loader/index.js","hoc/_Aux/index.js","context/auth.js","App/layout/ScrollToTop/index.js","routes/route.js","App/index.js","serviceWorker.js","store/reducer.js","index.js","store/actions.js"],"names":["defaultPath","basename","layout","preLayout","collapseMenu","layoutType","navIconColor","headerBackColor","navBackColor","navBrandColor","navBackImage","rtlLayout","navFixedLayout","headerFixedLayout","boxLayout","navDropdownIcon","navListIcon","navActiveListColor","navListTitleColor","navListTitleHide","configBlock","layout6Background","layout6BackSize","config","JSON","stringify","apiUrl","loader","className","Aux","props","children","AuthContext","createContext","useAuth","useContext","ScrollToTop","prevProps","this","location","window","scrollTo","React","Component","withRouter","route","path","exact","name","component","lazy","AdminLayout","Loadable","loading","Loader","App","menu","routes","map","index","Route","key","render","fallback","Switch","Boolean","hostname","match","initialState","isOpen","isTrigger","isFullScreen","reducer","state","action","trigger","open","type","actionTypes","triggerIndex","indexOf","id","filter","item","store","createStore","Wrap","existingTokens","parse","localStorage","getItem","useState","authTokens","setAuthTokens","Provider","value","data","setItem","BrowserRouter","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","COLLAPSE_MENU","COLLAPSE_TOGGLE","FULL_SCREEN","FULL_SCREEN_EXIT","CHANGE_LAYOUT","NAV_CONTENT_LEAVE","NAV_COLLAPSE_LEAVE"],"mappings":"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","file":"static/js/main.0739f2c4.chunk.js","sourcesContent":["export default {\r\n    defaultPath: '/dashboard/default',\r\n    basename: '/docs-compare', // only at build time to set, like /\r\n    layout: 'vertical', // vertical, horizontal (not available in lite version)\r\n    preLayout: null, // (not available in lite version)\r\n    collapseMenu: false, // mini-menu\r\n    layoutType: 'menu-light', // menu-dark, (menu-light, dark are not available in lite version)\r\n    navIconColor: false,\r\n    headerBackColor: 'header-default', // header-default, (header-blue, header-red, header-purple, header-lightblue, header-dark are not available in lite version)\r\n    navBackColor: 'navbar-default', // navbar-default, (navbar-blue, navbar-red, navbar-purple, navbar-lightblue, navbar-dark are not available in lite version)\r\n    navBrandColor: 'brand-default', // brand-default, (brand-blue, brand-red, brand-purple, brand-lightblue, brand-dark are not available in lite version)\r\n    navBackImage: false, // not available in lite version\r\n    rtlLayout: false, // not available in lite version\r\n    navFixedLayout: true,\r\n    headerFixedLayout: false, // not available in lite version\r\n    boxLayout: false,\r\n    navDropdownIcon: 'style1', // style1, (style2, style3 are not available in lite version)\r\n    navListIcon: 'style1', // style1, (style2, style3, style4, style5, style6 are not available in lite version)\r\n    navActiveListColor: 'active-default', // active-default, (active-blue, active-red, active-purple, active-lightblue, active-dark are not available in lite version)\r\n    navListTitleColor: 'title-default', // title-default, (title-blue, title-red, title-purple, title-lightblue, title-dark are not available in lite version)\r\n    navListTitleHide: false, // not available in lite version\r\n    configBlock: false, // not available in lite version\r\n    layout6Background : 'linear-gradient(to right, #A445B2 0%, #D41872 52%, #FF0066 100%)', // used only for pre-layout = layout-6\r\n    layout6BackSize : '', // used only for pre-layout = layout-6,\r\n    config: JSON.stringify({\r\n        apiUrl: 'http://localhostt:3000'\r\n    })\r\n};\r\n","import React from 'react';\r\n\r\nconst loader = () => {\r\n    return (\r\n        <div className=\"loader-bg\">\r\n            <div className=\"loader-track\">\r\n                <div className=\"loader-fill\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default loader;","const Aux = (props) => props.children;\r\n\r\nexport default Aux;","import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass ScrollToTop extends React.Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\n\r\nconst SignUp1 = React.lazy(() => import('../Components/Authentication/SignUp/SignUp1'));\r\nconst Signin1 = React.lazy(() => import('../Components/Authentication/SignIn/SignIn1'));\r\nconst Register = React.lazy(() => import('../test-files/register'));\r\n\r\nconst route = [\r\n    { path: '/auth/signup', exact: true, name: 'Signup', component: SignUp1 },\r\n    { path: '/auth/signin', exact: true, name: 'Signin', component: Signin1 },\r\n    { path: '/register', exact: true, name: 'Register', component: Register },\r\n];\r\n\r\nexport default route;","import React, { Component, Suspense } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Loadable from 'react-loadable';\r\n\r\nimport '../../node_modules/font-awesome/scss/font-awesome.scss';\r\n\r\nimport Loader from './layout/Loader'\r\nimport Aux from \"../hoc/_Aux\";\r\nimport ScrollToTop from './layout/ScrollToTop';\r\nimport routes from \"../routes/route\";\r\n\r\nconst AdminLayout = Loadable({\r\n    loader: () => import('./layout/AdminLayout'),\r\n    loading: Loader\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        const menu = routes.map((route, index) => {\r\n          return (route.component) ? (\r\n              <Route\r\n                  key={index}\r\n                  path={route.path}\r\n                  exact={route.exact}\r\n                  name={route.name}\r\n                  render={props => (\r\n                      <route.component {...props} />\r\n                  )} />\r\n          ) : (null);\r\n        });\r\n\r\n        return (\r\n            <Aux>\r\n                <ScrollToTop>\r\n                    <Suspense fallback={<Loader/>}>\r\n                        <Switch>\r\n                            {menu}\r\n                            <Route path=\"/\" component={AdminLayout} />\r\n                        </Switch>\r\n                    </Suspense>\r\n                </ScrollToTop>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from './actions';\r\nimport config from './../config';\r\n\r\nconst initialState = {\r\n    isOpen: [], //for active default menu\r\n    isTrigger: [], //for active default menu, set blank for horizontal\r\n    ...config,\r\n    isFullScreen: false, // static can't change\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    let trigger = [];\r\n    let open = [];\r\n\r\n    switch (action.type) {\r\n        case actionTypes.COLLAPSE_MENU:\r\n            return {\r\n                ...state,\r\n                collapseMenu: !state.collapseMenu\r\n            };\r\n        case actionTypes.COLLAPSE_TOGGLE:\r\n            if (action.menu.type === 'sub') {\r\n                open = state.isOpen;\r\n                trigger = state.isTrigger;\r\n\r\n                const triggerIndex = trigger.indexOf(action.menu.id);\r\n                if (triggerIndex > -1) {\r\n                    open = open.filter(item => item !== action.menu.id);\r\n                    trigger = trigger.filter(item => item !== action.menu.id);\r\n                }\r\n\r\n                if (triggerIndex === -1) {\r\n                    open = [...open, action.menu.id];\r\n                    trigger = [...trigger, action.menu.id];\r\n                }\r\n            } else {\r\n                open = state.isOpen;\r\n                const triggerIndex = (state.isTrigger).indexOf(action.menu.id);\r\n                trigger = (triggerIndex === -1) ? [action.menu.id] : [];\r\n                open = (triggerIndex === -1) ? [action.menu.id] : [];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                isOpen: open,\r\n                isTrigger: trigger\r\n            };\r\n        case actionTypes.NAV_CONTENT_LEAVE:\r\n            return {\r\n                ...state,\r\n                isOpen: open,\r\n                isTrigger: trigger,\r\n            };\r\n        case actionTypes.NAV_COLLAPSE_LEAVE:\r\n            if (action.menu.type === 'sub') {\r\n                open = state.isOpen;\r\n                trigger = state.isTrigger;\r\n\r\n                const triggerIndex = trigger.indexOf(action.menu.id);\r\n                if (triggerIndex > -1) {\r\n                    open = open.filter(item => item !== action.menu.id);\r\n                    trigger = trigger.filter(item => item !== action.menu.id);\r\n                }\r\n                return {\r\n                    ...state,\r\n                    isOpen: open,\r\n                    isTrigger: trigger,\r\n                };\r\n            }\r\n            return {...state};\r\n        case actionTypes.FULL_SCREEN :\r\n            return {\r\n                ...state,\r\n                isFullScreen: !state.isFullScreen\r\n            };\r\n        case actionTypes.FULL_SCREEN_EXIT:\r\n            return {\r\n                ...state,\r\n                isFullScreen: false\r\n            };\r\n        case actionTypes.CHANGE_LAYOUT:\r\n            return {\r\n                ...state,\r\n                layout: action.layout\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport { AuthContext } from \"./context/auth\";\r\n\r\n//import { history } from './_helpers';\r\n//import { accountService } from './_services';\r\n// setup fake backend\r\n//import { configureFakeBackend } from './_helpers';\r\n//configureFakeBackend();\r\n\r\nimport App from './App/index';\r\nimport * as serviceWorker from './serviceWorker';   \r\nimport reducer from './store/reducer';\r\nimport config from './config';\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\n\r\n// attempt silent token refresh before startup\r\n// accountService.refreshToken().finally(startApp);\r\n\r\nfunction Wrap(props) {\r\n    const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\r\n    const [authTokens, setAuthTokens] = useState(existingTokens || \"\");\r\n    \r\n    const setTokens = (data) => {\r\n      localStorage.setItem(\"tokens\", JSON.stringify(data));\r\n      setAuthTokens(data);\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\r\n            <Provider store={store}>\r\n            \r\n                    <BrowserRouter basename={config.basename}>\r\n                        {/* basename=\"/datta-able\" */}\r\n                        <App />\r\n                    </BrowserRouter>\r\n                \r\n            </Provider>\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nReactDOM.render(<Wrap />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const COLLAPSE_MENU = 'COLLAPSE_MENU';\r\nexport const COLLAPSE_TOGGLE = 'COLLAPSE_TOGGLE';\r\nexport const FULL_SCREEN = 'FULL_SCREEN';\r\nexport const FULL_SCREEN_EXIT = 'FULL_SCREEN_EXIT';\r\nexport const CHANGE_LAYOUT = 'CHANGE_LAYOUT';\r\nexport const NAV_CONTENT_LEAVE = 'NAV_CONTENT_LEAVE';\r\nexport const NAV_COLLAPSE_LEAVE = 'NAV_COLLAPSE_LEAVE';"],"sourceRoot":""}